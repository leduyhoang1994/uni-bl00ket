services:
  uni_class_game_frontend:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Frontend/Dockerfile
      args:
        - VITE_UNI_CLASS_BACKEND_HOST=${VITE_UNI_CLASS_BACKEND_HOST}
    container_name: uni_class_game_frontend
    ports:
      #- "3000:80"
      # - "5173:80"
      - "5173:80"
        #- "5173:80"
    depends_on:
      - uni_class_game_backend
    networks:
      - app-network

  uni_class_game_backend:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Backend/Dockerfile
    container_name: uni_class_game_backend
    depends_on:
      - redis_server
    networks:
      - app-network
    environment:
      - REDIS_CONNECTION_URL=${REDIS_CONNECTION_URL}
      - MONGO_CONNECTION_URL=${MONGO_CONNECTION_URL}
      - API_KEY=${API_KEY}

  nginx_service:
    image: nginx:stable-alpine
    container_name: nginx_service
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - uni_class_game_backend
    networks:
      - app-network

  redis_server:
    image: redis:7-alpine
    # Không đặt container_name để tránh xung đột tên giữa nhiều stack
    container_name: redis_server
    restart: unless-stopped
    ports:
      - "6369:6379"
    volumes:
      - ./redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  mongodb_server:
    image: mongo:latest
    container_name: mongodb_server
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb_data:/data/db
    environment:
      MONGO_INITDB_DATABASE: bl00ket
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
